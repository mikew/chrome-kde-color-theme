#!/usr/bin/env node
// @ts-check

const { spawnSync } = require('child_process')
const fs = require('fs/promises')
const path = require('path')

async function main() {
  spawnSync('rm', ['-r', 'build/'])
  const kdeColorSchemeName = kReadConfig(['General'], 'ColorScheme')

  await saveManifest(
    `${kdeColorSchemeName} (KDE) (System Decorations)`,
    await buildSystemDecorationTheme(),
  )
  await saveManifest(
    `${kdeColorSchemeName} (KDE) (Chrome Decorations)`,
    await buildChromeDecorationTheme(),
  )
}

/**
 * @param {string} name
 * @param {Manifest} manifest
 */
async function saveManifest(name, manifest) {
  manifest.name = name
  manifest.description = `Built on ${new Date()}`

  const filePath = path.join('build', name, 'manifest.json')
  spawnSync('mkdir', ['-p', path.dirname(filePath)])
  await fs.writeFile(filePath, JSON.stringify(manifest, undefined, 2))
}

async function buildSystemDecorationTheme() {
  let windowBackgroundNormal = kReadConfigColor(
    ['Colors:Window'],
    'BackgroundNormal',
  )
  try {
    windowBackgroundNormal = kReadConfigColor(
      ['Colors:Header'],
      'BackgroundNormal',
    )
  } catch {}
  let windowBackgroundInactive = kReadConfigColor(
    ['Colors:Window'],
    'BackgroundNormal',
  )
  try {
    windowBackgroundInactive = kReadConfigColor(
      ['Colors:Header', 'Inactive'],
      'BackgroundNormal',
    )
  } catch {}

  const viewBackgroundNormal = kReadConfigColor(
    ['Colors:View'],
    'BackgroundNormal',
  )
  const viewBackgroundAlternate = kReadConfigColor(
    ['Colors:View'],
    'BackgroundAlternate',
  )
  const viewForegroundNormal = kReadConfigColor(
    ['Colors:View'],
    'ForegroundNormal',
  )

  const windowForegroundNormal = kReadConfigColor(
    ['Colors:Window'],
    'ForegroundNormal',
  )
  const windowForegroundInactive = kReadConfigColor(
    ['Colors:Window'],
    'ForegroundInactive',
  )

  /** @type {Manifest} */
  const manifest = {
    manifest_version: 2,
    name: 'test',
    description: 'test',
    version: '1.0.0',
    theme: {
      colors: {
        background_tab: windowBackgroundNormal,
        background_tab_inactive: windowBackgroundInactive,
        bookmark_text: windowForegroundNormal,
        button_background: DEBUG_COLOR,
        frame: windowBackgroundNormal,
        frame_inactive: windowBackgroundInactive,
        ntp_background: viewBackgroundNormal,
        ntp_header: DEBUG_COLOR,
        ntp_link: DEBUG_COLOR,
        ntp_text: viewForegroundNormal,
        omnibox_background: viewBackgroundNormal,
        omnibox_text: viewForegroundNormal,
        tab_background_text: windowForegroundInactive,
        tab_background_text_inactive: windowForegroundInactive,
        tab_text: windowForegroundNormal,
        toolbar: viewBackgroundAlternate,
        toolbar_button_icon: windowForegroundNormal,
        toolbar_text: windowForegroundNormal,
      },
    },
  }

  return manifest
}

async function buildChromeDecorationTheme() {
  const viewBackgroundNormal = kReadConfigColor(
    ['Colors:View'],
    'BackgroundNormal',
  )
  const viewBackgroundAlternate = kReadConfigColor(
    ['Colors:View'],
    'BackgroundAlternate',
  )
  const viewForegroundNormal = kReadConfigColor(
    ['Colors:View'],
    'ForegroundNormal',
  )

  const windowForegroundNormal = kReadConfigColor(
    ['Colors:Window'],
    'ForegroundNormal',
  )
  const windowForegroundInactive = kReadConfigColor(
    ['Colors:Window'],
    'ForegroundInactive',
  )

  const wmActiveBackground = kReadConfigColor(['WM'], 'activeBackground')
  const wmActiveForeground = kReadConfigColor(['WM'], 'activeForeground')
  const wmInactiveBackground = kReadConfigColor(['WM'], 'inactiveBackground')
  const wmInactiveForeground = kReadConfigColor(['WM'], 'inactiveForeground')

  /** @type {Manifest} */
  const manifest = {
    manifest_version: 2,
    name: 'test',
    description: 'test',
    version: '1.0.0',
    theme: {
      colors: {
        background_tab: wmActiveBackground,
        background_tab_inactive: wmInactiveBackground,
        bookmark_text: windowForegroundNormal,
        button_background: DEBUG_COLOR,
        frame: wmActiveBackground,
        frame_inactive: wmInactiveBackground,
        ntp_background: viewBackgroundNormal,
        ntp_header: DEBUG_COLOR,
        ntp_link: DEBUG_COLOR,
        ntp_text: viewForegroundNormal,
        omnibox_background: viewBackgroundNormal,
        omnibox_text: viewForegroundNormal,
        tab_background_text: wmActiveForeground,
        tab_background_text_inactive: wmInactiveForeground,
        tab_text: windowForegroundNormal,
        toolbar: viewBackgroundAlternate,
        toolbar_button_icon: windowForegroundNormal,
        toolbar_text: windowForegroundNormal,
      },
    },
  }

  return manifest
}

const DEBUG_COLOR = [255, 0, 255]

/**
 * @param {string[]} groups
 * @param {string} key
 */
function kReadConfig(groups, key) {
  return spawnSync('kreadconfig5', [
    ...groups.map((x) => ['--group', x]).flat(),
    '--key',
    key,
  ])
    .stdout.toString()
    .trim()
}

/**
 * @param {string[]} groups
 * @param {string} key
 */
function kReadConfigColor(groups, key) {
  const output = kReadConfig(groups, key)

  if (!output) {
    throw new Error(`Could not find color for ${groups} ${key}`)
  }

  return output.split(',').map(Number)
}

/**
 * @typedef {{
 *  manifest_version: number
 *  name: string
 *  description: string
 *  version: string
 *  theme: ManifestTheme
 * }} Manifest
 */

/**
 * @typedef {{
 *  colors?: {
 *    background_tab?: number[]
 *    background_tab_inactive?: number[]
 *    background_tab_incognito?: number[]
 *    background_tab_incognito_inactive?: number[]
 *    bookmark_text?: number[]
 *    button_background?: number[]
 *    frame?: number[]
 *    frame_inactive?: number[]
 *    frame_incognito?: number[]
 *    frame_incognito_inactive?: number[]
 *    ntp_background?: number[]
 *    ntp_header?: number[]
 *    ntp_link?: number[]
 *    ntp_text?: number[]
 *    omnibox_background?: number[]
 *    omnibox_text?: number[]
 *    tab_background_text?: number[]
 *    tab_background_text_inactive?: number[]
 *    tab_background_text_incognito?: number[]
 *    tab_background_text_incognito_inactive?: number[]
 *    tab_text?: number[]
 *    toolbar?: number[]
 *    toolbar_button_icon?: number[]
 *    toolbar_text?: number[]
 *  }
 *  tints?: {
 *    background_tab?: number[]
 *    buttons?: number[]
 *    frame?: number[]
 *    frame_inactive?: number[]
 *    frame_incognito?: number[]
 *    frame_incognito_inactive?: number[]
 *  }
 * }} ManifestTheme
 */

main()
  .then(() => process.exit())
  .catch((err) => {
    throw err
  })
